# 🔐 OpenBAO Setup voor Multi-Namespace Secrets Management

OpenBAO (Open Build, Authenticate, and Operate) is een open-source fork van HashiCorp Vault die volledig open-source blijft onder de MPL 2.0 licentie. Deze setup is ontworpen voor het beheren van secrets in meerdere namespaces, ideaal voor multi-tenant toepassingen en integraties met verschillende systemen zoals n8n.

## 📋 Inhoudsopgave

- [Wat is OpenBAO?](#wat-is-openbao)
- [Waarom OpenBAO voor Secrets Management?](#waarom-openbao-voor-secrets-management)
- [Installatie](#installatie)
- [Snelstart](#snelstart)
- [Scripts Uitleg](#scripts-uitleg)
- [Namespaces en Clients Beheren](#namespaces-en-clients-beheren)
- [Gebruikersbeheer](#gebruikersbeheer)
- [Applicatie Integratie](#applicatie-integratie)
- [Structuur Uitleg](#structuur-uitleg)
- [Scripts in Docker](#scripts-in-docker)
- [Veelgestelde Vragen](#veelgestelde-vragen)

## 🔍 Wat is OpenBAO?

OpenBAO is een open-source fork van HashiCorp Vault die ontstond nadat HashiCorp in 2023 besloot om de licentie van hun producten te wijzigen van de open-source MPL 2.0 naar de meer restrictieve Business Source License (BSL).

OpenBAO biedt dezelfde kernfuncties als HashiCorp Vault:

- Veilige opslag van geheimen (API keys, wachtwoorden, etc.)
- Encryptie van gevoelige gegevens
- Toegangsbeheer met policies
- Verschillende authenticatiemethoden

## 🤔 Waarom OpenBAO voor Secrets Management?

Bij het werken met gevoelige gegevens zoals API keys is veilige opslag essentieel. Door OpenBAO te gebruiken:

1. **Gecentraliseerde secrets**: Alle gevoelige gegevens op één veilige plaats
2. **Multi-tenant isolatie**: Elke namespace/client heeft zijn eigen geïsoleerde omgeving
3. **Dynamische toegang**: Applicaties kunnen dynamisch secrets ophalen op basis van namespace/client-ID
4. **Verbeterde beveiliging**: Centraal beheer van toegangsrechten en audit logs
5. **Flexibele authenticatie**: Verschillende authenticatiemethoden voor verschillende use-cases

## 📦 Installatie

Deze repository bevat een Docker-gebaseerde setup voor zowel ontwikkeling als productie.

### Vereisten

- Docker en Docker Compose
- Basiskennis van command line
- jq (voor het verwerken van JSON in de scripts)

### Mappen structuur

```bash
hashicorp-vault/
├── docker-compose.dev.yml    # Docker Compose voor ontwikkeling
├── docker-compose.prod.yml   # Docker Compose voor productie
├── .env.vault.dev            # Omgevingsvariabelen voor ontwikkeling
├── .env.vault.prod           # Omgevingsvariabelen voor productie
├── scripts/
│   ├── init_openbao.sh       # Script voor initiële setup
│   └── add_client.sh         # Script voor het toevoegen van klanten
└── vault/                    # Data en configuratie mappen
    ├── data/                 # Persistente opslag (automatisch aangemaakt)
    ├── config/               # Configuratiebestanden
    └── tls/                  # TLS certificaten (voor productie)
```

## 🚀 Snelstart

1. **Start OpenBAO in ontwikkelmodus**

   ```bash
   docker-compose -f docker-compose.dev.yml up -d
   ```

2. **Initialiseer OpenBAO voor n8n**

   ```bash
   ./scripts/init_openbao.sh
   ```

   Dit script maakt de basis setup voor n8n integratie en toont de credentials die je nodig hebt voor n8n.

3. **Voeg een klant toe**

   ```bash
   ./scripts/add_client.sh -c klant1 -k slack=xoxb-12345 -k twitter=abcdef
   ```

4. **Gebruik de secrets in n8n**

   Configureer de Vault node in n8n met de credentials uit stap 2 en het pad `clients/klant1/api-keys`.

## 🛠️ Scripts Uitleg

### init_openbao.sh

Dit script initialiseert OpenBAO voor gebruik met n8n:

- Maakt een `n8n` namespace aan
- Schakelt de KV secrets engine in op pad `clients`
- Configureert AppRole authenticatie voor n8n
- Maakt een policy aan voor toegang tot klant-secrets
- Genereert en toont credentials voor n8n

**Gebruik:**

```bash
./scripts/init_openbao.sh
```

**Belangrijk:** Bewaar de getoonde Role ID en Secret ID veilig! Deze heb je nodig voor de n8n integratie.

### add_client.sh

Dit script voegt een nieuwe klant toe aan OpenBAO:

- Slaat klant-specifieke API keys op
- Maakt een klant-specifieke policy aan
- Ondersteunt zowel command-line parameters als JSON bestanden

**Gebruik met command-line parameters:**

```bash
./scripts/add_client.sh -c klant1 -k slack=xoxb-12345 -k twitter=abcdef
```

**Gebruik met JSON bestand:**

```bash
./scripts/add_client.sh -c klant2 -f keys.json
```

Voorbeeld van een keys.json bestand:

```json
{
  "slack": "xoxb-67890",
  "twitter": "ghijkl",
  "api_key": "your-api-key"
}
```

## 👥 Klanten Beheren

### Nieuwe klant toevoegen

Gebruik het `add_client.sh` script zoals hierboven beschreven.

### Secrets bekijken

```bash
# Verbind met de OpenBAO container
docker exec -it vault-dev sh

# Exporteer de token en namespace
export VAULT_TOKEN=root-token-dev
export VAULT_NAMESPACE=n8n

# Bekijk de secrets van een klant
vault kv get clients/klant1/api-keys
```

### Secrets bijwerken

```bash
# Voeg een nieuwe key toe of update een bestaande
vault kv patch clients/klant1/api-keys instagram=insta-12345

# Vervang alle keys
vault kv put clients/klant1/api-keys slack=new-token twitter=new-token
```

## 🔌 n8n Integratie

Om OpenBAO te gebruiken in n8n workflows:

1. **Installeer de Vault node** (indien nog niet beschikbaar)

2. **Configureer de Vault node**:

   - URL: `https://vault.hummer.ai` (productie) of `http://127.0.0.1:49281` (ontwikkeling)
   - Auth Method: AppRole
   - Role ID: _van init_openbao.sh_
   - Secret ID: _van init_openbao.sh_
   - Namespace: `n8n`
   - Path: `clients/{{$json["klant_id"]}}/api-keys`

3. **Gebruik in workflows**:
   - Stel een variabele in voor `klant_id`
   - Gebruik de Vault node om secrets op te halen
   - Gebruik de opgehaalde secrets in API calls

Voorbeeld workflow:

1. HTTP Trigger met klant-ID parameter
2. Set Variable voor klant-ID
3. Vault node om secrets op te halen
4. HTTP Request met de opgehaalde API key

## 🏗️ Structuur Uitleg

Voor beginners met OpenBAO, hier is een uitleg van de belangrijkste concepten:

### Namespaces

Namespaces zijn geïsoleerde omgevingen binnen OpenBAO. In onze setup gebruiken we één namespace `n8n` als hoofdcategorie.

### Secrets Engines

Secrets engines slaan geheimen op en genereren dynamische credentials. We gebruiken de KV (Key-Value) v2 engine op pad `clients`.

Standaard zie je bij een nieuwe installatie:

- **cubbyhole**: Persoonlijke secrets engine gekoppeld aan je token
- **secret**: Standaard KV secrets engine

### Policies

Policies bepalen wie toegang heeft tot welke geheimen. We maken:

- Een algemene policy voor n8n om alle klant-secrets te lezen
- Een specifieke policy per klant voor geïsoleerde toegang

### AppRole Authenticatie

AppRole is een authenticatiemethode voor applicaties (zoals n8n). Het gebruikt:

- Role ID: Een openbare identifier
- Secret ID: Een geheim dat alleen bekend is bij de applicatie

Standaard zie je bij een nieuwe installatie alleen de "token" authenticatiemethode. Na het uitvoeren van het init script wordt ook "approle" toegevoegd.

## 🐳 Scripts in Docker

De scripts zijn ook beschikbaar binnen de Docker container in de ontwikkelomgeving. Je kunt ze direct vanuit de container gebruiken:

```bash
# Verbind met de container
docker exec -it vault-dev sh

# Voer scripts uit vanuit de container
sh /opt/bin/init_openbao.sh
sh /opt/bin/add_client.sh -c klant1 -k slack=xoxb-12345
```

**Let op:** In de productieomgeving zijn de scripts niet beschikbaar in de container voor betere beveiliging.

Dit is handig als je direct in de container wilt werken zonder de scripts op je host systeem uit te voeren.

## ❓ Veelgestelde Vragen

### Wat is het verschil tussen OpenBAO en HashiCorp Vault?

OpenBAO is een open-source fork van HashiCorp Vault met dezelfde functionaliteit, maar onder een open-source licentie (MPL 2.0).

### Hoe kan ik de secrets in n8n gebruiken?

Gebruik de Vault node in n8n, configureer deze met de credentials uit het init script, en haal secrets op met het pad `clients/klant-id/api-keys`.

### Is de API toegang veilig?

Ja, de API toegang is beveiligd via AppRole authenticatie. Wanneer n8n verbinding maakt met OpenBAO:

1. Gebruikt het eerst de Role ID en Secret ID om een tijdelijke token te krijgen
2. Deze token heeft beperkte rechten volgens de policy
3. De token verloopt na een ingestelde tijd

### Is deze setup veilig voor productie?

De productie setup is beveiligd met de volgende maatregelen:

- OpenBAO is alleen lokaal toegankelijk (127.0.0.1:8200)
- TLS-terminatie wordt afgehandeld door LiteSpeed als reverse proxy
- Scripts zijn verwijderd uit de productiecontainer
- Swapping is uitgeschakeld (mem_swappiness: 0)

Voor extra beveiliging raden we aan om:

- Firewall regels in te stellen voor de LiteSpeed reverse proxy
- Regelmatig backups te maken van de data directory
- Audit logging in te schakelen

### Wat als ik meer klanten wil toevoegen?

Gebruik het `add_client.sh` script voor elke nieuwe klant. Er is geen praktische limiet aan het aantal klanten.

### Hoe kan ik de structuur aanpassen voor complexere use cases?

Voor complexere use cases kun je:

- Meerdere namespaces maken per klant
- Verschillende secrets engines gebruiken
- Meer gedetailleerde policies maken

---

Voor meer informatie over OpenBAO, bezoek de [officiële OpenBAO documentatie](https://openbao.org/docs/).
